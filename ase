import sys
import threading
import signal
import win32api, win32con
from random import randint
from time import sleep
from os import system
from pathlib import Path

import keyboard
from bfNumbers import *


class GameField:
    def __init__(self, field : [list]):
        self.field = field
        self.score = 0, 0
        
    def enlargeScore(self, update : list):
        self.score[0] += self.update[0]
        self.score[1] += self.update[1]
        self.updated = update
    
    @classmethod
    def startGame(cls):

        startGame(fraze, blank, game, 
              cube1, cube2, cube3,
              n0, n1, n2, n3, n4,
              n5, n6, n7, n8, n9)
              
    def play(self, playerPaddle, robotPaddle, pongBall):
        GameField.startGame()
        print(n0, blank*18, n0)
        for _ in self.field:
            print(*_)
        while True:
            
            '''
            to move objects first we need to find out current position
            after getting it we need to create anuiamtion with normal
            fps equal to 1, except for the ball, because there will be some
            sircumstances when it's speed 'll be far more than [1,1]
            
            so to create animation in general we need to move cursor to
            the start of the line, place the line with ' ' in our's object position
            move cursor one line up/down place the newx/previous line to the latter 
            with our obj.appearence in it
            
            note that every movement is created separately
            
            '''
        
            # player's paddle movement
            y_paddle, x_paddle = playerPaddle.position
            y_robot, x_robot = robotPaddle.position
            # ball's movement
            y_ball, x_ball = pongBall.position

            self.field[y_paddle][x_paddle] = ' '
            self.field[y_robot][x_robot] = ' '
            self.field[y_ball][x_ball] = ' '

            playerPaddle.moveObject(y_paddle, self)
            pongBall.moveObject(y_ball, self)
            robotPaddle.moveObject(y_robot, self)

            if keyboard.is_pressed('Up'):
                if playerPaddle.position[0] != 23:
                    playerPaddle.position[0] += 1
            if keyboard.is_pressed('Down'):
                if playerPaddle.position[0] != 1:
                    playerPaddle.position[0] -= 1

            y_paddle, x_paddle = playerPaddle.position
            self.field[y_paddle][x_paddle] = '|'
            #ball's movement

            if y_ball == 1 or y_ball == 23:
                pongBall.velocity[0] *= -1

            if x_ball == 2 or x_ball == 39:
                if y_ball == y_paddle:
                    pongBall.velocity[1] *= -1
                    ctg = pongBall.velocity[1] / pongBall.velocity[0]
                    l = pongBall.position[1] * ctg
                    pongBall.finalPosition = (24 - (
                    (l - (((l - pongBall.position[0]) / 25) * 24) - pongBall.position[0]))).__ceil__() - 2
                    robotPaddle.velocity[0] *= (-pongBall.finalPosition + robotPaddle.position[0]) // (
                                robotPaddle.position[0] - pongBall.finalPosition)
                if y_ball == y_robot:
                    pongBall.velocity[1] *= -1
                    robotPaddle.flag = 'start'
                else: ...

            try:
                pongBall.finalPosition + 1
                deadTime = abs(pongBall.finalPosition - robotPaddle.position[0]) // robotPaddle.velocity[0]
                if abs(pongBall.position[1] // pongBall.velocity[1]) / 5  <= deadTime:
                    if robotPaddle.position[0] != pongBall.finalPosition:
                        robotPaddle.position[0] += robotPaddle.velocity[0]
                    else:
                        print(1)
                        robotPaddle.flag = 'stop'
                #     else:
                #         robotPaddle.position[0] = robotPaddle.position[0]
                else:
                    middlePostion = randint(-1, 1)
                    if robotPaddle.flag == 'start':
                        if robotPaddle.position[0] != 1 and robotPaddle.position[0] != 23:
                            robotPaddle.position[0] += middlePostion
                    if robotPaddle.flag == 'stop':
                        ...
                #     if not flag:
                #         if robotPaddle.position[0] != 1 and robotPaddle.position[0] != 23:
                #             robotPaddle.position[0] += middlePostion
                #         print(1)
                #     else:
                #         if robotPaddle.position[0] != pongBall.finalPosition:
                #             robotPaddle.position[0] += robotPaddle.velocity[0]
                #         else:
                #             robotPaddle.position[0] = robotPaddle.position[0]
            except Exception:
                middlePostion = randint(-1, 1)
                if robotPaddle.position[0] != 1 and robotPaddle.position[0] != 23:
                    robotPaddle.position[0] += middlePostion

            y_robot, x_robot = robotPaddle.position
            self.field[y_robot][x_robot]  = '|'
            pongBall.position[0] += pongBall.velocity[0]
            pongBall.position[1] += pongBall.velocity[1]

            y_ball, x_ball = pongBall.position
            self.field[y_ball][x_ball] = '◯'


            playerPaddle.moveObject(y_paddle, self)
            pongBall.moveObject(y_ball, self)
            robotPaddle.moveObject(y_robot, self)

            sleep(0.1)

class GameObject:
    def __init__(self, appearance : str,
                 position : [int, int],  # position [y, x], velocity [y,x]
                 velocity: [int, int]):
        self.appearance = appearance
        self.position = position
        self.velocity = velocity

    def stickObject(self, field):
        y, x = self.position
        field.field[y][x] = self.appearance
    
    def moveObject(self, y, field):
        sys.stdout.write(f"\x1b[{y + 1}A\x1b[2K")
        print(*field.field[y])
        sys.stdout.write(f"\x1b[{y}B")
 
class PongBall(GameObject):

    def displacement(self):
        self.position[0] += self.velocity[0]
        self.position[1] += self.velocity[1]

    def moveBall(self, field):
        y_ball, x_ball = self.position # get ball's position | remember (y,x)
        field.filed[y_ball][x_ball] = ' '
        
        sys.stdout.write(f"\x1b[{y + 1}A\x1b[2K")
        print(*field.field[y])
        sys.stdout.write(f"\x1b[{y}B")
        
        

# this is block of function created to prevent user-breaking the programm


# fucntion is disabled due to unfortunate surcumstances appeared in windows xi with getting uac
"""
def disabletaskManager():
    '''
    so, unfortunately do disable task manager ordinary way
    we need to have admin rights, that's way to do them we
    need to follow this way:
        * create runAsAdmin.txt file -> change it to .bat
        * create disableTaskManger.txt file -> change it to .bat
        * creat thread that will in parallel way check if task manager process is on
            if yes -> run with help of runAsAdmin run disableTaskManger
    '''
    adminOath = '''@echo off
    :: BatchGotAdmin
    :------------------
    >nul 2>&1 "%SYSTEMROOT%\system32\cacls.exe" "%SYSTEMROOT%\system32\config\system"
    
    REM --> If error flag set, we do not have admin
    if '%errorlevel%' NEQ '0' (
        goto UACPrompt
    ) else (gotADmin)
    
    :UACPrompt
        echo Set UAC = CreateObject^("Shell.Application"^) > "%temp%\getadmin.vbs"
        echo UAC.ShellExecute "%~s0", "", "", "runas", 1 >> "%temp%\getadmin.vbs"
        
        "%temp%\getadmin.vbs"
        exit /B
    :gotAdmin
        if exist "%temp%\getadmin.vbs" (del "%temp%\getadmin.vbs")
        push "%CD%"
        CD /D "%~dp0"
    
    set SCRIPT = "%TEMP%\%RANDOM%-%RANDOM%-%RANDOM%.vbs"
    
    @cmd.exe
    '''
    
    with open("adminOath.txt", 'w') as runAsAdmin:
        runAsAdmin.write(adminOath)
"""    

def click(x,y):
    '''
    to prevent user closing the programm with a mouse key
    '''

    while True:
        win32api.SetCursorPos((x,y))
    #win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,x,y,0,0)
    #win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,x,y,0,0)

def dialogWindow(password):
    '''
    function to check if user knows the password (
    in case he don't the programm won't stop 
    and ll be working as it supposed)
    '''
    from tkinter import Tk
    from tkinter import simpledialog
    
    userPassword = simpledialog.askstring("Admin checker", "Enter password >>> ") # create simple dialog window
    root = Tk()
    if userPassword == password:
        root.quit()
        return 'Accepted'
    else:
        root.quit()
        return 'denied'
    

def sigint_hander(signal, handler):
    '''
    function is created to prevent closing the programm
    by keyboard interruption (unless user know the password)
    '''
    
    password = '111'
    
    match dialogWindow(password):
        case 'Accepted':
            exit()
        case 'denied':
            pass

    

if __name__ == "__main__":

    signal.signal(signal.SIGINT, sigint_hander)

    pongField = [[' ' for i in range(41)] for j in range(25)] # create field map
    pongField[0] = ['+' for _ in range(41)] # add upper bound
    pongField[-1] = ['~' for _ in range(41)] # add lower bound
    
    pongField = GameField(pongField)
    
    playerPad = GameObject('|', [12, 39], [1, 0]) # moves only up/down
    robotPad = GameObject('|', [12, 2], [1, 0]) # moves only up/down
    pongBall = GameObject('◯', [12, 20], [1, 1]) # can move in any direction in 2D space, spawns in the center
                    
    playerPad.stickObject(pongField)
    robotPad.stickObject(pongField)
    pongBall.stickObject(pongField)
    
    system('cls')
    _mouseLock = threading.Thread(target=click, args=(10, 10), daemon=True)
    _mouseLock.start()
    
    pongField.play(playerPad, robotPad, pongBall)
    
